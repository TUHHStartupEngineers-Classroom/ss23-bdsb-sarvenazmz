{
  "hash": "54a842e64aa9ee8238256cccd922a012",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Sarvenaz Mostafazadeh\"\n---\n\n\n# Data Visualization Challenge-1\n\n\n::: {.cell hash='04_data_visualization_cache/html/plot_842c154af7b66961d8d240c7d989eb28'}\n\n```{.r .cell-code}\n##----.libraries----\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(scales)\n\n##----1.Read the COVID-19 data----\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 311396 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n##----2.Filter data for the selected countries----\nselected_countries <- c(\"Germany\", \"United Kingdom\", \"France\", \"Spain\", \"United States\")\nfiltered_data <- covid_data_tbl %>%\n  filter(location %in% selected_countries)\n\n##----3.Convert the date column to the appropriate format----\nfiltered_data$date <- as.Date(filtered_data$date, format = \"%Y-%m-%d\")\n\n##----4.Filter data until April 19, 2022----\nfiltered_data <- filtered_data %>%\n  filter(date <= ymd(\"2022-04-19\"))\n\n##----5.Create a month-year column for grouping----\nfiltered_data$month_year <- format(filtered_data$date, \"%B'%y\")\n\n##----6.Define the colors for each country----\ncolors <- c(\"Germany\" = \"purple\", \"United Kingdom\" = \"green\", \"France\" = \"orange\",\n            \"Spain\" = \"pink\", \"United States\" = \"yellow\")\n\n##----7.Plotting----\nus_max_cases <- max(filtered_data$total_cases[filtered_data$location == \"United States\" & !is.na(filtered_data$total_cases)])\n\nggplot(filtered_data, aes(x = date, y = total_cases, color = location)) +\n  geom_line(size = 1) +\n  scale_color_manual(values = colors) +\n  labs(x = \"\", y = \"Cumulative Cases\", title = \"COVID-19 confirmed cases worldwide\", subtitle = \"As of 19/04/2022\") +\n  scale_x_date(date_labels = \"%B'%y\", date_breaks = \"1 month\") +\n  scale_y_continuous(labels = function(x) paste0(format(x/1e6, scientific = FALSE), \"M\"),\n                     breaks = c(0, 50e6, 100e6, 150e6),\n                     limits = c(0, 150e6)) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\",\n        plot.background = element_rect(fill = \"darkgrey\")) +\n  labs(color = \"Country\") +\n  theme(axis.text.x = element_blank(), \n        axis.ticks.x = element_blank()) +\n  geom_label(data = filtered_data %>% filter(location == \"United States\" & total_cases == us_max_cases),\n             aes(x = date, y = total_cases, \n                 label = paste0(format(us_max_cases, scientific = FALSE, big.mark = \".\", decimal.mark = \",\"))),\n             fill = \"red\", \n             color = \"white\",\n             fontface = \"bold\",\n             label.padding = unit(0.5, \"lines\"),\n             label.size = 0.15,\n             label.r = unit(0.15, \"lines\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 76 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/plot-1.png){width=960}\n:::\n:::\n\n\n# Data Visualization Challenge-2\n\n\n::: {.cell hash='04_data_visualization_cache/html/plots_14871c497dde978da78ede5122109808'}\n\n```{.r .cell-code}\n##----.library(maps)----\nlibrary(tidyverse)\nlibrary(maps)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'maps'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:purrr':\n#> \n#>     map\n```\n:::\n\n```{.r .cell-code}\n##----1.Access the data----\nworld <- map_data(\"world\")\n\n##----2.Read the COVID-19 data----\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 311396 Columns: 67\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n##----3.calculation of mortality rate----\nplot_data <- covid_data_tbl %>%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %>%\n  filter(date == as.Date(\"2021-04-16\")) %>%\n  filter(!is.na(total_deaths)) %>%\n  group_by(location) %>%\n  summarize(max_total_deaths = max(total_deaths),\n            max_population = max(population),\n            mortality_rate = max(total_deaths) * 100 / max(population)) %>%\n  filter(!is.na(mortality_rate))\n\n##----4.Calculate total deaths worldwide because we need it in the subtitle----\ntotal_deaths_worldwide_million <- sum(plot_data$max_total_deaths)\n#Format total deaths worldwide as rounded to the nearest million\nformatted_total_deaths_worldwide <- paste0(\"Around \", round(total_deaths_worldwide_million / 1e6), \" Million\")\n\n##----5.Date annotation----\ndate_annotation <- \"Date: 04/16/2021\"\n\n##----6.Plot the map----\nggplot(plot_data, aes(map_id = location)) +\n  geom_map(aes(fill = mortality_rate), map = world) +\n  expand_limits(x = world$long, y = world$lat) +\n  scale_fill_gradient(low = \"mistyrose\", high = \"red\", na.value = \"grey\", breaks = c(0.20, 0.40, 0.60), labels = c(\"0.20%\", \"0.40%\", \"0.60%\")) +\n  labs(title = \"Confirmed COVID-19 deaths relative to the size of the population\",\n       subtitle = paste0(formatted_total_deaths_worldwide, \" confirmed COVID-19 deaths worldwide\"),\n       fill = \"Mortality Rate\") +\n  theme_void() +\n  annotate(\"rect\", xmin = max(world$long), xmax = max(world$long) + 0.25, ymin = min(world$lat), ymax = min(world$lat) + 0.25, fill = \"darkgrey\") +\n  annotate(\"text\", x = max(world$long) + 0.1, y = min(world$lat) + 0.1, label = date_annotation, hjust = 0, vjust = 0, size = 4, color = \"white\") +\n  theme(plot.background = element_rect(fill = \"darkgrey\"))\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/plots-1.png){width=960}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}